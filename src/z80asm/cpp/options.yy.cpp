// cpp/options.yy.cpp generated by reflex 2.0.1 from cpp/options.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_dotall              true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "cpp/options.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               OptionsLexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "cpp/options.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


// silence warnings from RE-flex
#ifdef _MSC_VER
#pragma warning(disable:4102)
#pragma warning(disable:4800)
#else
#ifdef __GNUC__
//#pragma GCC   diagnostic ignored "-Wignored-qualifiers"
#else
#ifdef __clang__
//#pragma clang diagnostic ignored "-Wignored-qualifiers"
#endif
#endif
#endif


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class OptionsLexer : public reflex::AbstractLexer<reflex::Matcher> {
public:
    typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
    OptionsLexer(
        const reflex::Input& input = reflex::Input(),
        std::ostream&        os    = std::cout)
        :
        AbstractBaseLexer(input, os) {
    }
    static const int INITIAL = 0;
    virtual int lex();
    int lex(
        const reflex::Input& input,
        std::ostream*        os = NULL) {
        in(input);
        if (os)
            out(*os);
        return lex();
    }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// z80asm restart
// Copyright (C) Paulo Custodio, 2011-2020
// License: The Artistic License 2.0, http://www.perlfoundation.org/artistic_license_2_0
//-----------------------------------------------------------------------------


#include "legacy.h"
#include "App.h"

#include <string>
#include <utility>
#include <vector>

#include <cassert>
#include <climits>
#include <cstring>
#include <cstdlib>

static const char* SkipEqual(const char* text);
static int ParseNum(const std::string& text);
static void OptionDefine(const std::string& text);
static void OptionFiller(const std::string& text);


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int OptionsLexer::lex() {
    static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
    if (!has_matcher())
        matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    while (true) {
        switch (matcher().scan()) {
        case 0:
            if (matcher().at_end())
                return int();
            else
                out().put(matcher().input());
            break;
        case 1: // rule at line 53: -\?\z|-h\z :
        { App::ExitManual(); }
        break;
        case 2: // rule at line 54: -v\z :
        { app.options.verbose = true; return true; }
        break;
        case 3: // rule at line 55: -m\z :
        { app.options.mapfile = true; return true; }
        break;
        case 4: // rule at line 56: -s\z :
        { app.options.symtable = true; return true; }
        break;
        case 5: // rule at line 57: -l\z :
        { app.options.listfile = true; return true; }
        break;
        case 6: // rule at line 58: -g\z :
        { app.options.globaldef = true; return true; }
        break;
        case 7: // rule at line 59: -b\z :
        { app.options.makeBinary = true; return true; }
        break;
        case 8: // rule at line 60: -d\z :
        { app.options.update = true; return true; }
        break;
        case 9: // rule at line 61: -R\z :
        { app.options.relocatable = true; return true; }
        break;
        case 10: // rule at line 62: -reloc-info\z :
        { app.options.relocInfo = true; return true; }
        break;
        case 11: // rule at line 63: -split-bin\z :
        { app.options.splitBinary = true; return true; }

        break;
        case 12: // rule at line 65: -m=?z80\z :
        { app.options.cpu.Init(Cpu::Type::Z80); return true; }
        break;
        case 13: // rule at line 66: -m=?z80n\z :
        { app.options.cpu.Init(Cpu::Type::Z80N); return true; }
        break;
        case 14: // rule at line 67: -m=?z180\z :
        { app.options.cpu.Init(Cpu::Type::Z180); return true; }
        break;
        case 15: // rule at line 68: -m=?r2k\z :
        { app.options.cpu.Init(Cpu::Type::R2K); return true; }
        break;
        case 16: // rule at line 69: -m=?r3k\z :
        { app.options.cpu.Init(Cpu::Type::R3K); return true; }
        break;
        case 17: // rule at line 70: -m=?8080\z :
        { app.options.cpu.Init(Cpu::Type::I8080); return true; }
        break;
        case 18: // rule at line 71: -m=?8085\z :
        { app.options.cpu.Init(Cpu::Type::I8085); return true; }
        break;
        case 19: // rule at line 72: -m=?gbz80\z :
        { app.options.cpu.Init(Cpu::Type::GBZ80); return true; }
        break;
        case 20: { // rule at line 73: -m=?ti83\z :
            app.options.cpu.Init(Cpu::Type::Z80);
            app.options.arch.Init(Arch::Type::TI83);
            return true;
        }
        break;
        case 21: { // rule at line 76: -m=?ti83plus\z :
            app.options.cpu.Init(Cpu::Type::Z80);
            app.options.arch.Init(Arch::Type::TI83PLUS);
            return true;
        }
        break;
        case 22: // rule at line 80: -IXIY\z :
        { app.options.swapIxIy = true; return true; }
        break;
        case 23: // rule at line 81: -opt-speed\z :
        { app.options.optimizeSpeed = true; return true; }
        break;
        case 24: // rule at line 82: -debug\z :
        { app.options.SetDebug(); return true; }
        break;
        case 25: // rule at line 83: -I=?[\x00-\xff]+\z :
        { app.options.includePath.push_back(SkipEqual(text() + 2));  return true; }

        break;
        case 26: // rule at line 85: -L=?[\x00-\xff]+\z :
        { app.options.libraryPath.push_back(SkipEqual(text() + 2));  return true; }
        break;
        case 27: // rule at line 86: -x=?[\x00-\xff]+\z :
        { app.options.outputLibrary = SkipEqual(text() + 2); return true; }
        break;
        case 28: // rule at line 87: -l=?[\x00-\xff]+\z :
        { app.options.libraries.push_back(SkipEqual(text() + 2)); return true; }

        break;
        case 29: // rule at line 89: -O=?[\x00-\xff]+\z :
        { app.options.outputDirectory = SkipEqual(text() + 2); return true; }
        break;
        case 30: // rule at line 90: -o=?[\x00-\xff]+\z :
        { app.options.outputFile = SkipEqual(text() + 2); return true; }

        break;
        case 31: { // rule at line 92: -D=?(?:[A-Z_a-z][0-9A-Z_a-z]*)(?:=(?:(?:0[Xx][0-9A-Fa-f]+|\$[0-9A-Fa-f]+|[0-9][0-9A-Fa-f]*[Hh])|(?:[0-9]+)))?\z :
            OptionDefine(SkipEqual(text() + 2)); return true;
        }

        break;
        case 32: // rule at line 95: \+zx\z :
        { app.options.SetAppmake(Appmake::ZX); return true; }
        break;
        case 33: // rule at line 96: \+zx81\z :
        { app.options.SetAppmake(Appmake::ZX81); return true; }

        break;
        case 34: // rule at line 98: -r=?(?:(?:0[Xx][0-9A-Fa-f]+|\$[0-9A-Fa-f]+|[0-9][0-9A-Fa-f]*[Hh])|(?:[0-9]+))\z :
        { set_origin_option(ParseNum(SkipEqual(text() + 2))); return true; }
        break;
        case 35: // rule at line 99: -f=?(?:(?:0[Xx][0-9A-Fa-f]+|\$[0-9A-Fa-f]+|[0-9][0-9A-Fa-f]*[Hh])|(?:[0-9]+))\z :
        { OptionFiller(SkipEqual(text() + 2)); return true; }

        break;
        case 36: // rule at line 101: --\z :
        { return true; }
        break;
        case 37: // rule at line 102: \z :
        { return true; }

        break;
        case 38: // rule at line 104: [^\x2b\x2d][\x00-\xff]*\z :
        { process_file(text()); return true; }

        break;
        case 39: // rule at line 106: [\x00-\xff] :
        { return false; }

        break;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


static const char* SkipEqual(const char* text) {
    if (*text == '=')
        text++;
    return text;
}

// parse NUM
static int ParseNum(const std::string& text) {
    char* end = nullptr;
    const char* p = text.c_str();
    long lval;
    int radix;
    char suffix = '\0';

    if (p[0] == '\0') 		// empty
        return -1;
    else if (p[0] == '$') {
        p++;
        radix = 16;
    }
    else if (p[0] == '0' && tolower(p[1]) == 'x') {
        p += 2;
        radix = 16;
    }
    else if (isdigit(p[0]) && tolower(p[strlen(p) - 1]) == 'h') {
        suffix = p[strlen(p) - 1];
        radix = 16;
    }
    else
        radix = 10;

    lval = strtol(p, &end, radix);
    if (end == nullptr || *end != suffix || errno == ERANGE || lval < 0 || lval > INT_MAX)
        return -1;
    else
        return static_cast<int>(lval);
}

static void OptionDefine(const std::string& text) {
    using namespace std;

    auto p = text.find('=');
    if (p == string::npos) {		// -Dvar
        app.options.defines.push_back({ text, 1});
    }
    else {							// -Dvar=value
        string name = text.substr(0, p);
        int num = ParseNum(text.c_str() + p + 1);
        assert(num >= 0);

        app.options.defines.push_back({ name, num});
    }
}

static void OptionFiller(const std::string& text) {
    int value = ParseNum(text);
    if (value < 0 || value > 0xFF)
        error_invalid_filler_option(text.c_str());
    else
        app.options.filler = value;
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m) {
    int c0 = 0, c1 = 0;
    m.FSM_INIT(c1);

S0:
    m.FSM_FIND();
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(37, c1);
    if (c1 == '-') goto S4;
    if (c1 == '+') goto S25;
    if (0 <= c1) goto S30;
    return m.FSM_HALT(c1);

S4:
    m.FSM_TAKE(39);
    c1 = m.FSM_CHAR();
    if (c1 == 'x') goto S72;
    if (c1 == 'v') goto S37;
    if (c1 == 's') goto S47;
    if (c1 == 'r') goto S61;
    if (c1 == 'o') goto S69;
    if (c1 == 'm') goto S39;
    if (c1 == 'l') goto S50;
    if (c1 == 'h') goto S35;
    if (c1 == 'g') goto S52;
    if (c1 == 'f') goto S79;
    if (c1 == 'd') goto S56;
    if (c1 == 'b') goto S54;
    if (c1 == 'R') goto S59;
    if (c1 == 'O') goto S73;
    if (c1 == 'L') goto S71;
    if (c1 == 'I') goto S67;
    if (c1 == 'D') goto S74;
    if (c1 == '?') goto S33;
    if (c1 == '-') goto S84;
    return m.FSM_HALT(c1);

S25:
    m.FSM_TAKE(39);
    c1 = m.FSM_CHAR();
    if (c1 == 'z') goto S86;
    return m.FSM_HALT(c1);

S28:
    m.FSM_TAKE(37);
    return m.FSM_HALT();

S30:
    m.FSM_TAKE(39);
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(38, c1);
    if (0 <= c1) goto S90;
    return m.FSM_HALT(c1);

S33:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(1, c1);
    return m.FSM_HALT(c1);

S35:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(1, c1);
    return m.FSM_HALT(c1);

S37:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(2, c1);
    return m.FSM_HALT(c1);

S39:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(3, c1);
    if (c1 == 'z') goto S98;
    if (c1 == 't') goto S108;
    if (c1 == 'r') goto S101;
    if (c1 == 'g') goto S106;
    if (c1 == '=') goto S110;
    if (c1 == '8') goto S104;
    return m.FSM_HALT(c1);

S47:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(4, c1);
    if (c1 == 'p') goto S118;
    return m.FSM_HALT(c1);

S50:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(5, c1);
    if (0 <= c1) goto S122;
    return m.FSM_HALT(c1);

S52:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(6, c1);
    return m.FSM_HALT(c1);

S54:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(7, c1);
    return m.FSM_HALT(c1);

S56:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(8, c1);
    if (c1 == 'e') goto S130;
    return m.FSM_HALT(c1);

S59:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(9, c1);
    return m.FSM_HALT(c1);

S61:
    c1 = m.FSM_CHAR();
    if (c1 == 'e') goto S134;
    if (c1 == '=') goto S156;
    if ('1' <= c1 && c1 <= '9') goto S149;
    if (c1 == '0') goto S136;
    if (c1 == '$') goto S145;
    return m.FSM_HALT(c1);

S67:
    c1 = m.FSM_CHAR();
    if (c1 == 'X') goto S160;
    if (0 <= c1) goto S163;
    return m.FSM_HALT(c1);

S69:
    c1 = m.FSM_CHAR();
    if (c1 == 'p') goto S165;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S71:
    c1 = m.FSM_CHAR();
    if (0 <= c1) goto S170;
    return m.FSM_HALT(c1);

S72:
    c1 = m.FSM_CHAR();
    if (0 <= c1) goto S172;
    return m.FSM_HALT(c1);

S73:
    c1 = m.FSM_CHAR();
    if (0 <= c1) goto S174;
    return m.FSM_HALT(c1);

S74:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'z') goto S176;
    if (c1 == '_') goto S176;
    if ('A' <= c1 && c1 <= 'Z') goto S176;
    if (c1 == '=') goto S183;
    return m.FSM_HALT(c1);

S79:
    c1 = m.FSM_CHAR();
    if (c1 == '=') goto S207;
    if ('1' <= c1 && c1 <= '9') goto S200;
    if (c1 == '0') goto S187;
    if (c1 == '$') goto S196;
    return m.FSM_HALT(c1);

S84:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(36, c1);
    return m.FSM_HALT(c1);

S86:
    c1 = m.FSM_CHAR();
    if (c1 == 'x') goto S213;
    return m.FSM_HALT(c1);

S88:
    m.FSM_TAKE(38);
    return m.FSM_HALT();

S90:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(38, c1);
    if (0 <= c1) goto S90;
    return m.FSM_HALT(c1);

S92:
    m.FSM_TAKE(1);
    return m.FSM_HALT();

S94:
    m.FSM_TAKE(2);
    return m.FSM_HALT();

S96:
    m.FSM_TAKE(3);
    return m.FSM_HALT();

S98:
    c1 = m.FSM_CHAR();
    if (c1 == '8') goto S216;
    if (c1 == '1') goto S218;
    return m.FSM_HALT(c1);

S101:
    c1 = m.FSM_CHAR();
    if (c1 == '3') goto S222;
    if (c1 == '2') goto S220;
    return m.FSM_HALT(c1);

S104:
    c1 = m.FSM_CHAR();
    if (c1 == '0') goto S224;
    return m.FSM_HALT(c1);

S106:
    c1 = m.FSM_CHAR();
    if (c1 == 'b') goto S226;
    return m.FSM_HALT(c1);

S108:
    c1 = m.FSM_CHAR();
    if (c1 == 'i') goto S228;
    return m.FSM_HALT(c1);

S110:
    c1 = m.FSM_CHAR();
    if (c1 == 'z') goto S98;
    if (c1 == 't') goto S108;
    if (c1 == 'r') goto S101;
    if (c1 == 'g') goto S106;
    if (c1 == '8') goto S104;
    return m.FSM_HALT(c1);

S116:
    m.FSM_TAKE(4);
    return m.FSM_HALT();

S118:
    c1 = m.FSM_CHAR();
    if (c1 == 'l') goto S230;
    return m.FSM_HALT(c1);

S120:
    m.FSM_TAKE(5);
    return m.FSM_HALT();

S122:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(28, c1);
    if (0 <= c1) goto S122;
    return m.FSM_HALT(c1);

S124:
    m.FSM_TAKE(6);
    return m.FSM_HALT();

S126:
    m.FSM_TAKE(7);
    return m.FSM_HALT();

S128:
    m.FSM_TAKE(8);
    return m.FSM_HALT();

S130:
    c1 = m.FSM_CHAR();
    if (c1 == 'b') goto S234;
    return m.FSM_HALT(c1);

S132:
    m.FSM_TAKE(9);
    return m.FSM_HALT();

S134:
    c1 = m.FSM_CHAR();
    if (c1 == 'l') goto S236;
    return m.FSM_HALT(c1);

S136:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(34, c1);
    if (c1 == 'x') goto S238;
    if (c1 == 'h') goto S250;
    if ('a' <= c1 && c1 <= 'f') goto S244;
    if (c1 == 'X') goto S238;
    if (c1 == 'H') goto S250;
    if ('A' <= c1 && c1 <= 'F') goto S244;
    if ('0' <= c1 && c1 <= '9') goto S149;
    return m.FSM_HALT(c1);

S145:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'f') goto S253;
    if ('A' <= c1 && c1 <= 'F') goto S253;
    if ('0' <= c1 && c1 <= '9') goto S253;
    return m.FSM_HALT(c1);

S149:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(34, c1);
    if (c1 == 'h') goto S250;
    if ('a' <= c1 && c1 <= 'f') goto S244;
    if (c1 == 'H') goto S250;
    if ('A' <= c1 && c1 <= 'F') goto S244;
    if ('0' <= c1 && c1 <= '9') goto S149;
    return m.FSM_HALT(c1);

S156:
    c1 = m.FSM_CHAR();
    if ('1' <= c1 && c1 <= '9') goto S149;
    if (c1 == '0') goto S136;
    if (c1 == '$') goto S145;
    return m.FSM_HALT(c1);

S160:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(25, c1);
    if (c1 == 'I') goto S258;
    if (0 <= c1) goto S163;
    return m.FSM_HALT(c1);

S163:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(25, c1);
    if (0 <= c1) goto S163;
    return m.FSM_HALT(c1);

S165:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == 't') goto S263;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S168:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S170:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(26, c1);
    if (0 <= c1) goto S170;
    return m.FSM_HALT(c1);

S172:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(27, c1);
    if (0 <= c1) goto S172;
    return m.FSM_HALT(c1);

S174:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(29, c1);
    if (0 <= c1) goto S174;
    return m.FSM_HALT(c1);

S176:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    if ('a' <= c1 && c1 <= 'z') goto S176;
    if (c1 == '_') goto S176;
    if ('A' <= c1 && c1 <= 'Z') goto S176;
    if (c1 == '=') goto S276;
    if ('0' <= c1 && c1 <= '9') goto S176;
    return m.FSM_HALT(c1);

S183:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'z') goto S176;
    if (c1 == '_') goto S176;
    if ('A' <= c1 && c1 <= 'Z') goto S176;
    return m.FSM_HALT(c1);

S187:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(35, c1);
    if (c1 == 'x') goto S280;
    if (c1 == 'h') goto S292;
    if ('a' <= c1 && c1 <= 'f') goto S286;
    if (c1 == 'X') goto S280;
    if (c1 == 'H') goto S292;
    if ('A' <= c1 && c1 <= 'F') goto S286;
    if ('0' <= c1 && c1 <= '9') goto S200;
    return m.FSM_HALT(c1);

S196:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'f') goto S295;
    if ('A' <= c1 && c1 <= 'F') goto S295;
    if ('0' <= c1 && c1 <= '9') goto S295;
    return m.FSM_HALT(c1);

S200:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(35, c1);
    if (c1 == 'h') goto S292;
    if ('a' <= c1 && c1 <= 'f') goto S286;
    if (c1 == 'H') goto S292;
    if ('A' <= c1 && c1 <= 'F') goto S286;
    if ('0' <= c1 && c1 <= '9') goto S200;
    return m.FSM_HALT(c1);

S207:
    c1 = m.FSM_CHAR();
    if ('1' <= c1 && c1 <= '9') goto S200;
    if (c1 == '0') goto S187;
    if (c1 == '$') goto S196;
    return m.FSM_HALT(c1);

S211:
    m.FSM_TAKE(36);
    return m.FSM_HALT();

S213:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(32, c1);
    if (c1 == '8') goto S302;
    return m.FSM_HALT(c1);

S216:
    c1 = m.FSM_CHAR();
    if (c1 == '0') goto S304;
    return m.FSM_HALT(c1);

S218:
    c1 = m.FSM_CHAR();
    if (c1 == '8') goto S307;
    return m.FSM_HALT(c1);

S220:
    c1 = m.FSM_CHAR();
    if (c1 == 'k') goto S309;
    return m.FSM_HALT(c1);

S222:
    c1 = m.FSM_CHAR();
    if (c1 == 'k') goto S311;
    return m.FSM_HALT(c1);

S224:
    c1 = m.FSM_CHAR();
    if (c1 == '8') goto S313;
    return m.FSM_HALT(c1);

S226:
    c1 = m.FSM_CHAR();
    if (c1 == 'z') goto S316;
    return m.FSM_HALT(c1);

S228:
    c1 = m.FSM_CHAR();
    if (c1 == '8') goto S318;
    return m.FSM_HALT(c1);

S230:
    c1 = m.FSM_CHAR();
    if (c1 == 'i') goto S320;
    return m.FSM_HALT(c1);

S232:
    m.FSM_TAKE(28);
    return m.FSM_HALT();

S234:
    c1 = m.FSM_CHAR();
    if (c1 == 'u') goto S322;
    return m.FSM_HALT(c1);

S236:
    c1 = m.FSM_CHAR();
    if (c1 == 'o') goto S324;
    return m.FSM_HALT(c1);

S238:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'f') goto S326;
    if ('A' <= c1 && c1 <= 'F') goto S326;
    if ('0' <= c1 && c1 <= '9') goto S326;
    return m.FSM_HALT(c1);

S242:
    m.FSM_TAKE(34);
    return m.FSM_HALT();

S244:
    c1 = m.FSM_CHAR();
    if (c1 == 'h') goto S331;
    if ('a' <= c1 && c1 <= 'f') goto S244;
    if (c1 == 'H') goto S331;
    if ('A' <= c1 && c1 <= 'F') goto S244;
    if ('0' <= c1 && c1 <= '9') goto S244;
    return m.FSM_HALT(c1);

S250:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(34, c1);
    if ('0' <= c1 && c1 <= '9') goto S250;
    return m.FSM_HALT(c1);

S253:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(34, c1);
    if ('a' <= c1 && c1 <= 'f') goto S253;
    if ('A' <= c1 && c1 <= 'F') goto S253;
    if ('0' <= c1 && c1 <= '9') goto S253;
    return m.FSM_HALT(c1);

S258:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(25, c1);
    if (c1 == 'Y') goto S333;
    if (0 <= c1) goto S163;
    return m.FSM_HALT(c1);

S261:
    m.FSM_TAKE(25);
    return m.FSM_HALT();

S263:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == '-') goto S335;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S266:
    m.FSM_TAKE(30);
    return m.FSM_HALT();

S268:
    m.FSM_TAKE(26);
    return m.FSM_HALT();

S270:
    m.FSM_TAKE(27);
    return m.FSM_HALT();

S272:
    m.FSM_TAKE(29);
    return m.FSM_HALT();

S274:
    m.FSM_TAKE(31);
    return m.FSM_HALT();

S276:
    c1 = m.FSM_CHAR();
    if ('1' <= c1 && c1 <= '9') goto S351;
    if (c1 == '0') goto S338;
    if (c1 == '$') goto S347;
    return m.FSM_HALT(c1);

S280:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'f') goto S358;
    if ('A' <= c1 && c1 <= 'F') goto S358;
    if ('0' <= c1 && c1 <= '9') goto S358;
    return m.FSM_HALT(c1);

S284:
    m.FSM_TAKE(35);
    return m.FSM_HALT();

S286:
    c1 = m.FSM_CHAR();
    if (c1 == 'h') goto S363;
    if ('a' <= c1 && c1 <= 'f') goto S286;
    if (c1 == 'H') goto S363;
    if ('A' <= c1 && c1 <= 'F') goto S286;
    if ('0' <= c1 && c1 <= '9') goto S286;
    return m.FSM_HALT(c1);

S292:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(35, c1);
    if ('0' <= c1 && c1 <= '9') goto S292;
    return m.FSM_HALT(c1);

S295:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(35, c1);
    if ('a' <= c1 && c1 <= 'f') goto S295;
    if ('A' <= c1 && c1 <= 'F') goto S295;
    if ('0' <= c1 && c1 <= '9') goto S295;
    return m.FSM_HALT(c1);

S300:
    m.FSM_TAKE(32);
    return m.FSM_HALT();

S302:
    c1 = m.FSM_CHAR();
    if (c1 == '1') goto S365;
    return m.FSM_HALT(c1);

S304:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(12, c1);
    if (c1 == 'n') goto S369;
    return m.FSM_HALT(c1);

S307:
    c1 = m.FSM_CHAR();
    if (c1 == '0') goto S371;
    return m.FSM_HALT(c1);

S309:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(15, c1);
    return m.FSM_HALT(c1);

S311:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(16, c1);
    return m.FSM_HALT(c1);

S313:
    c1 = m.FSM_CHAR();
    if (c1 == '5') goto S379;
    if (c1 == '0') goto S377;
    return m.FSM_HALT(c1);

S316:
    c1 = m.FSM_CHAR();
    if (c1 == '8') goto S381;
    return m.FSM_HALT(c1);

S318:
    c1 = m.FSM_CHAR();
    if (c1 == '3') goto S383;
    return m.FSM_HALT(c1);

S320:
    c1 = m.FSM_CHAR();
    if (c1 == 't') goto S386;
    return m.FSM_HALT(c1);

S322:
    c1 = m.FSM_CHAR();
    if (c1 == 'g') goto S388;
    return m.FSM_HALT(c1);

S324:
    c1 = m.FSM_CHAR();
    if (c1 == 'c') goto S390;
    return m.FSM_HALT(c1);

S326:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(34, c1);
    if ('a' <= c1 && c1 <= 'f') goto S326;
    if ('A' <= c1 && c1 <= 'F') goto S326;
    if ('0' <= c1 && c1 <= '9') goto S326;
    return m.FSM_HALT(c1);

S331:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(34, c1);
    return m.FSM_HALT(c1);

S333:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(22, c1);
    if (0 <= c1) goto S163;
    return m.FSM_HALT(c1);

S335:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == 's') goto S394;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S338:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    if (c1 == 'x') goto S397;
    if (c1 == 'h') goto S407;
    if ('a' <= c1 && c1 <= 'f') goto S401;
    if (c1 == 'X') goto S397;
    if (c1 == 'H') goto S407;
    if ('A' <= c1 && c1 <= 'F') goto S401;
    if ('0' <= c1 && c1 <= '9') goto S351;
    return m.FSM_HALT(c1);

S347:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'f') goto S410;
    if ('A' <= c1 && c1 <= 'F') goto S410;
    if ('0' <= c1 && c1 <= '9') goto S410;
    return m.FSM_HALT(c1);

S351:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    if (c1 == 'h') goto S407;
    if ('a' <= c1 && c1 <= 'f') goto S401;
    if (c1 == 'H') goto S407;
    if ('A' <= c1 && c1 <= 'F') goto S401;
    if ('0' <= c1 && c1 <= '9') goto S351;
    return m.FSM_HALT(c1);

S358:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(35, c1);
    if ('a' <= c1 && c1 <= 'f') goto S358;
    if ('A' <= c1 && c1 <= 'F') goto S358;
    if ('0' <= c1 && c1 <= '9') goto S358;
    return m.FSM_HALT(c1);

S363:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(35, c1);
    return m.FSM_HALT(c1);

S365:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(33, c1);
    return m.FSM_HALT(c1);

S367:
    m.FSM_TAKE(12);
    return m.FSM_HALT();

S369:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(13, c1);
    return m.FSM_HALT(c1);

S371:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(14, c1);
    return m.FSM_HALT(c1);

S373:
    m.FSM_TAKE(15);
    return m.FSM_HALT();

S375:
    m.FSM_TAKE(16);
    return m.FSM_HALT();

S377:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(17, c1);
    return m.FSM_HALT(c1);

S379:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(18, c1);
    return m.FSM_HALT(c1);

S381:
    c1 = m.FSM_CHAR();
    if (c1 == '0') goto S425;
    return m.FSM_HALT(c1);

S383:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(20, c1);
    if (c1 == 'p') goto S429;
    return m.FSM_HALT(c1);

S386:
    c1 = m.FSM_CHAR();
    if (c1 == '-') goto S431;
    return m.FSM_HALT(c1);

S388:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(24, c1);
    return m.FSM_HALT(c1);

S390:
    c1 = m.FSM_CHAR();
    if (c1 == '-') goto S435;
    return m.FSM_HALT(c1);

S392:
    m.FSM_TAKE(22);
    return m.FSM_HALT();

S394:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == 'p') goto S437;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S397:
    c1 = m.FSM_CHAR();
    if ('a' <= c1 && c1 <= 'f') goto S440;
    if ('A' <= c1 && c1 <= 'F') goto S440;
    if ('0' <= c1 && c1 <= '9') goto S440;
    return m.FSM_HALT(c1);

S401:
    c1 = m.FSM_CHAR();
    if (c1 == 'h') goto S445;
    if ('a' <= c1 && c1 <= 'f') goto S401;
    if (c1 == 'H') goto S445;
    if ('A' <= c1 && c1 <= 'F') goto S401;
    if ('0' <= c1 && c1 <= '9') goto S401;
    return m.FSM_HALT(c1);

S407:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    if ('0' <= c1 && c1 <= '9') goto S407;
    return m.FSM_HALT(c1);

S410:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    if ('a' <= c1 && c1 <= 'f') goto S410;
    if ('A' <= c1 && c1 <= 'F') goto S410;
    if ('0' <= c1 && c1 <= '9') goto S410;
    return m.FSM_HALT(c1);

S415:
    m.FSM_TAKE(33);
    return m.FSM_HALT();

S417:
    m.FSM_TAKE(13);
    return m.FSM_HALT();

S419:
    m.FSM_TAKE(14);
    return m.FSM_HALT();

S421:
    m.FSM_TAKE(17);
    return m.FSM_HALT();

S423:
    m.FSM_TAKE(18);
    return m.FSM_HALT();

S425:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(19, c1);
    return m.FSM_HALT(c1);

S427:
    m.FSM_TAKE(20);
    return m.FSM_HALT();

S429:
    c1 = m.FSM_CHAR();
    if (c1 == 'l') goto S449;
    return m.FSM_HALT(c1);

S431:
    c1 = m.FSM_CHAR();
    if (c1 == 'b') goto S451;
    return m.FSM_HALT(c1);

S433:
    m.FSM_TAKE(24);
    return m.FSM_HALT();

S435:
    c1 = m.FSM_CHAR();
    if (c1 == 'i') goto S453;
    return m.FSM_HALT(c1);

S437:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == 'e') goto S455;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S440:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    if ('a' <= c1 && c1 <= 'f') goto S440;
    if ('A' <= c1 && c1 <= 'F') goto S440;
    if ('0' <= c1 && c1 <= '9') goto S440;
    return m.FSM_HALT(c1);

S445:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(31, c1);
    return m.FSM_HALT(c1);

S447:
    m.FSM_TAKE(19);
    return m.FSM_HALT();

S449:
    c1 = m.FSM_CHAR();
    if (c1 == 'u') goto S458;
    return m.FSM_HALT(c1);

S451:
    c1 = m.FSM_CHAR();
    if (c1 == 'i') goto S460;
    return m.FSM_HALT(c1);

S453:
    c1 = m.FSM_CHAR();
    if (c1 == 'n') goto S462;
    return m.FSM_HALT(c1);

S455:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == 'e') goto S464;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S458:
    c1 = m.FSM_CHAR();
    if (c1 == 's') goto S467;
    return m.FSM_HALT(c1);

S460:
    c1 = m.FSM_CHAR();
    if (c1 == 'n') goto S469;
    return m.FSM_HALT(c1);

S462:
    c1 = m.FSM_CHAR();
    if (c1 == 'f') goto S471;
    return m.FSM_HALT(c1);

S464:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(30, c1);
    if (c1 == 'd') goto S473;
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S467:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(21, c1);
    return m.FSM_HALT(c1);

S469:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(11, c1);
    return m.FSM_HALT(c1);

S471:
    c1 = m.FSM_CHAR();
    if (c1 == 'o') goto S479;
    return m.FSM_HALT(c1);

S473:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(23, c1);
    if (0 <= c1) goto S168;
    return m.FSM_HALT(c1);

S475:
    m.FSM_TAKE(21);
    return m.FSM_HALT();

S477:
    m.FSM_TAKE(11);
    return m.FSM_HALT();

S479:
    c1 = m.FSM_CHAR();
    if (m.FSM_META_EOB(c1))
        m.FSM_TAKE(10, c1);
    return m.FSM_HALT(c1);

S481:
    m.FSM_TAKE(23);
    return m.FSM_HALT();

S483:
    m.FSM_TAKE(10);
    return m.FSM_HALT();
}

