    ; math/integer/l_mulu_16_8x8
PUBLIC l_mulu_16_8x8
    ; compute:  hl = l * e
    EXTERN l_small_mul_16_16x8
        ; enter :  l = 8-bit multiplicand
        ;         de = 16-bit multiplicand
        ; exit  : hl = 16-bit product
        ;         carry reset

    ; math/integer/l_mulu_16_16x8
PUBLIC l_mulu_16_16x8
    ; compute:  hl = hl * e
    EXTERN l_small_mul_16_16x8
        ; enter :  l = 8-bit multiplicand
        ;         de = 16-bit multiplicand
        ; exit  : hl = 16-bit product
        ;         carry reset

	; math/integer/l_mulu_16_16x16
PUBLIC l_mulu_16_16x16
    ; compute:  hl = hl * de
    EXTERN l_small_mul_16_16x16
        ; enter : de = 16-bit multiplicand
        ;         hl = 16-bit multiplicand
        ; exit  : hl = 16-bit product
        ;         carry reset

	; math/integer/l_mulu_24_16x8
PUBLIC l_mulu_24_16x8
    ; compute:  ahl = hl * e
    EXTERN l0_small_mul_32_32x32
        ; enter : dede' = 32-bit multiplicand
        ;         bcbc' = 32-bit multiplicand
        ;         hlhl' = 0
        ; exit  : dehl = 32-bit product
        ;         carry reset

	; math/integer/l_mulu_32_16x16
PUBLIC l_mulu_32_16x16
    ; compute:  dehl = hl * de
    EXTERN l0_small_mul_32_32x32
        ; enter : dede' = 32-bit multiplicand
        ;         bcbc' = 32-bit multiplicand
        ;         hlhl' = 0
        ; exit  : dehl = 32-bit product
        ;         carry reset

	; math/integer/l_mulu_32_32x32
PUBLIC l_mulu_32_32x32
    ; compute:  dehl = dehl * dehl'
    EXTERN l_small_mul_32_32x32
        ; enter : dehl = 32-bit multiplicand
        ;         dehl'= 32-bit multiplicand (more leading zeroes = better performance)
        ; exit  : dehl = 32-bit product
        ;         carry reset
        EXTERN l0_small_mul_32_32x32
            ; enter : dede' = 32-bit multiplier   = x
            ;         bcbc' = 32-bit multiplicand = y
            ;         hlhl' = 0
            ; exit  : dehl = 32-bit product
            ;         carry reset

	; math/integer/l_mulu_40_32x8
PUBLIC l_mulu_40_32x8
    ; compute:  adehl = dehl * a
    EXTERN l_small_mul_40_32x8
        ; enter : dehl  = 32-bit multiplicand
        ;            a  = 8-bit multiplicand
        ; exit  : adehl = 40-bit product
        ;         carry reset

	; math/integer/l_mulu_64_32x32
PUBLIC l_mulu_64_32x32
    ; enter : dehl = 32-bit multiplicand (more zeros = better performance)
    ;         dehl'= 32-bit multiplicand
    ; exit  : dehl dehl' = 64-bit product
    ;         carry reset
    EXTERN l_small_mul_64_32x32
        ; enter : dehl = 32-bit multiplicand (more zeros = better performance)
        ;         dehl'= 32-bit multiplicand
        ; exit  : dehl dehl' = 64-bit product
        ;         carry reset
        EXTERN l0_small_mul_64_32x32
            ; enter : bc'bc = 32-bit multiplier    = x
            ;         de'de = 32-bit multiplicand  = y
            ;         hl'hl = 0
            ; exit  : dehl dehl' = 64-bit product
            ;         carry reset

	; math/integer/l_mulu_64_64x64
PUBLIC l_mulu_64_64x64
    ; enter :      +-------------------------------
    ;              | +15 
    ;              | ...  multiplicand AB (8 bytes)
    ;              | + 8 
    ;         ix = |-------------------------------
    ;              | + 7jn
    ;              | ...  multiplicand CD (8 bytes)
    ;              | + 0
    ;              +-------------------------------
    ;
    ; exit  : ix structure unchanged
    ;         dehl' dehl = 64-bit product
    ;         carry set if overflow
    EXTERN l_small_mul_64_64x64
        ; enter :      +-------------------------------
        ;              | +15 
        ;              | ...  multiplicand AB (8 bytes)
        ;              | + 8 
        ;         ix = |-------------------------------
        ;              | + 7
        ;              | ...  multiplicand CD (8 bytes)
        ;              | + 0
        ;              +-------------------------------
        ;
        ; exit  : ix structure unchanged
        ;         dehl' dehl = 64-bit product
        ;         carry reset
        EXTERN l0_small_mul_64_32x32
            ; enter : bc'bc = 32-bit multiplier    = x
            ;         de'de = 32-bit multiplicand  = y
            ;         hl'hl = 0
            ; exit  : dehl dehl' = 64-bit product
            ;         carry reset
        EXTERN l0_small_mul_32_32x32
            ; enter : dede' = 32-bit multiplier   = x
            ;         bcbc' = 32-bit multiplicand = y
            ;         hlhl' = 0
            ; exit  : dehl = 32-bit product
            ;         carry reset

	; math/integer/l_mulu_72_64x8
PUBLIC l_mulu_72_64x8
    ; enter :   dehl'dehl = 64-bit multiplicand
    ;                   a = 8-bit multiplicand
    ; exit  : a dehl'dehl = 72-bit product
    ;         carry reset
    EXTERN l_small_mul_72_64x8
        ; enter :   dehl'dehl = 64-bit multiplicand
        ;                   a = 8-bit multiplicand
        ; exit  : a dehl'dehl = 72-bit product
        ;         carry reset
        EXTERN l_small_mul_40_32x8



