;
; 	ANSI Video handling for the Epson PX8
;	By Stefano Bodrato - 2019
;
; 	Handles Attributes INVERSE, BOLD + UNDERLINED
;
;	Display a char in location (__console_y),(__console_x)
;	A=char to display
;
;
;	$Id: f_ansi_char.asm $
;


	SECTION smc_clib
	PUBLIC	ansi_CHAR
	
	EXTERN	subcpu_call
	
	EXTERN	__console_y
	EXTERN	__console_x
	
	PUBLIC	INVRS
	PUBLIC	BOLD
	PUBLIC	UNDRLN



.ansi_CHAR
		ld	hl,data+5
		ld	(hl),255	; underline the character by default, then ovverride if not necessary
		ld	l,a
		ld	h,0
		add	hl,hl
		ld	d,h
		ld	e,l
		add hl,hl
		add hl,de
		ld	de,font8x6-192
		add	hl,de
		ld	de,data
.UNDRLN
		ld	b,6		; 5 (underlined) or 6
		
.copyloop
		ld	a,(hl)
.BOLD
		nop	;	rla
		nop	;	or (hl)
.INVRS
		nop			; set to CPL to enable INVERSE
		ld	(de),a
		inc hl
		inc de
		djnz	copyloop
		
		
		ld	a,(__console_x)
		ld	(xcoord),a
		ld	a,(__console_y)
		add a		; *2
		ld	e,a
		add a		; *4
		add e		; *6
		add 2		; center the text vertically
		ld	(ycoord),a

		ld	hl,packet_wr
		jp	subcpu_call



		SECTION	rodata_clib

font8x6:
  defb    0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0x00 
  defb    0x10 , 0x10 , 0x10 , 0x00 , 0x10 , 0x00 
  defb    0x28 , 0x28 , 0x00 , 0x00 , 0x00 , 0x00 
  defb    0x24 , 0x7E , 0x24 , 0x7E , 0x24 , 0x00 
  defb    0x3C , 0x50 , 0x3C , 0x12 , 0x7C , 0x00 
  defb    0xC4 , 0xC8 , 0x10 , 0x26 , 0x46 , 0x00 
  defb    0x08 , 0x14 , 0x28 , 0x44 , 0x3A , 0x00 
  defb    0x10 , 0x10 , 0x20 , 0x00 , 0x00 , 0x00 
  defb    0x08 , 0x10 , 0x10 , 0x10 , 0x10 , 0x08 
  defb    0x10 , 0x08 , 0x08 , 0x08 , 0x08 , 0x10 
  defb    0x28 , 0x10 , 0x7C , 0x10 , 0x28 , 0x00 
  defb    0x10 , 0x10 , 0x7C , 0x10 , 0x10 , 0x00 
  defb    0x00 , 0x00 , 0x00 , 0x00 , 0x10 , 0x20 
  defb    0x00 , 0x00 , 0x7C , 0x00 , 0x00 , 0x00 
  defb    0x00 , 0x00 , 0x00 , 0x00 , 0x30 , 0x00 
  defb    0x00 , 0x04 , 0x08 , 0x10 , 0x20 , 0x00 
  defb    0x18 , 0x24 , 0x24 , 0x24 , 0x18 , 0x00 
  defb    0x10 , 0x30 , 0x10 , 0x10 , 0x38 , 0x00 
  defb    0x38 , 0x04 , 0x18 , 0x20 , 0x3C , 0x00 
  defb    0x3C , 0x04 , 0x18 , 0x04 , 0x38 , 0x00 
  defb    0x08 , 0x18 , 0x28 , 0x3C , 0x08 , 0x00 
  defb    0x3C , 0x20 , 0x38 , 0x04 , 0x38 , 0x00 
  defb    0x18 , 0x20 , 0x38 , 0x24 , 0x18 , 0x00 
  defb    0x3C , 0x04 , 0x08 , 0x10 , 0x10 , 0x00 
  defb    0x18 , 0x24 , 0x18 , 0x24 , 0x18 , 0x00 
  defb    0x18 , 0x24 , 0x1C , 0x04 , 0x18 , 0x00 
  defb    0x00 , 0x10 , 0x00 , 0x00 , 0x10 , 0x00 
  defb    0x00 , 0x10 , 0x00 , 0x00 , 0x10 , 0x20 
  defb    0x08 , 0x10 , 0x20 , 0x10 , 0x08 , 0x00 
  defb    0x00 , 0x3C , 0x00 , 0x3C , 0x00 , 0x00 
  defb    0x20 , 0x10 , 0x08 , 0x10 , 0x20 , 0x00 
  defb    0x38 , 0x44 , 0x18 , 0x00 , 0x10 , 0x00 
  defb    0x38 , 0x54 , 0x4C , 0x40 , 0x3C , 0x00 
  defb    0x38 , 0x44 , 0x7C , 0x44 , 0x44 , 0x00 
  defb    0x78 , 0x44 , 0x78 , 0x44 , 0x78 , 0x00 
  defb    0x38 , 0x44 , 0x40 , 0x44 , 0x38 , 0x00 
  defb    0x78 , 0x44 , 0x44 , 0x44 , 0x78 , 0x00 
  defb    0x7C , 0x40 , 0x70 , 0x40 , 0x7C , 0x00 
  defb    0x7C , 0x40 , 0x70 , 0x40 , 0x40 , 0x00 
  defb    0x38 , 0x40 , 0x4C , 0x44 , 0x38 , 0x00 
  defb    0x44 , 0x44 , 0x7C , 0x44 , 0x44 , 0x00 
  defb    0x38 , 0x10 , 0x10 , 0x10 , 0x38 , 0x00 
  defb    0x0E , 0x04 , 0x04 , 0x44 , 0x38 , 0x00 
  defb    0x44 , 0x48 , 0x70 , 0x48 , 0x44 , 0x00 
  defb    0x40 , 0x40 , 0x40 , 0x40 , 0x7C , 0x00 
  defb    0x44 , 0x6C , 0x54 , 0x44 , 0x44 , 0x00 
  defb    0x44 , 0x64 , 0x54 , 0x4C , 0x44 , 0x00 
  defb    0x38 , 0x44 , 0x44 , 0x44 , 0x38 , 0x00 
  defb    0x78 , 0x44 , 0x78 , 0x40 , 0x40 , 0x00 
  defb    0x38 , 0x44 , 0x44 , 0x48 , 0x34 , 0x00 
  defb    0x78 , 0x44 , 0x78 , 0x44 , 0x44 , 0x00 
  defb    0x3C , 0x40 , 0x38 , 0x04 , 0x78 , 0x00 
  defb    0x7C , 0x10 , 0x10 , 0x10 , 0x10 , 0x00 
  defb    0x44 , 0x44 , 0x44 , 0x44 , 0x38 , 0x00 
  defb    0x44 , 0x44 , 0x28 , 0x28 , 0x10 , 0x00 
  defb    0x44 , 0x44 , 0x54 , 0x54 , 0x28 , 0x00 
  defb    0x44 , 0x28 , 0x10 , 0x28 , 0x44 , 0x00 
  defb    0x44 , 0x28 , 0x10 , 0x20 , 0x40 , 0x00 
  defb    0x7C , 0x08 , 0x10 , 0x20 , 0x7C , 0x00 
  defb    0x38 , 0x20 , 0x20 , 0x20 , 0x38 , 0x00 
  defb    0x00 , 0x20 , 0x10 , 0x08 , 0x04 , 0x00 
  defb    0x38 , 0x08 , 0x08 , 0x08 , 0x38 , 0x00 
  defb    0x10 , 0x28 , 0x44 , 0x00 , 0x00 , 0x00 
  defb    0x00 , 0x00 , 0x00 , 0x00 , 0x00 , 0xF8
  defb    0x20 , 0x10 , 0x00 , 0x00 , 0x00 , 0x00 
  defb    0x00 , 0x1C , 0x24 , 0x2C , 0x14 , 0x00 
  defb    0x20 , 0x38 , 0x24 , 0x24 , 0x38 , 0x00 
  defb    0x00 , 0x18 , 0x20 , 0x20 , 0x18 , 0x00 
  defb    0x04 , 0x1C , 0x24 , 0x24 , 0x1C , 0x00 
  defb    0x00 , 0x18 , 0x2C , 0x30 , 0x18 , 0x00 
  defb    0x0C , 0x12 , 0x78 , 0x20 , 0x20 , 0x40 
  defb    0x00 , 0x1C , 0x24 , 0x1C , 0x04 , 0x38 
  defb    0x20 , 0x38 , 0x24 , 0x24 , 0x24 , 0x00 
  defb    0x10 , 0x00 , 0x30 , 0x10 , 0x7C , 0x00 
  defb    0x04 , 0x00 , 0x04 , 0x04 , 0x48 , 0x30 
  defb    0x40 , 0x48 , 0x70 , 0x48 , 0x44 , 0x00 
  defb    0x30 , 0x10 , 0x10 , 0x10 , 0x38 , 0x00 
  defb    0x00 , 0x68 , 0x54 , 0x54 , 0x54 , 0x00 
  defb    0x00 , 0x38 , 0x24 , 0x24 , 0x24 , 0x00 
  defb    0x00 , 0x18 , 0x24 , 0x24 , 0x18 , 0x00 
  defb    0x00 , 0x38 , 0x24 , 0x24 , 0x38 , 0x20 
  defb    0x00 , 0x1C , 0x24 , 0x24 , 0x1C , 0x04 
  defb    0x00 , 0x38 , 0x24 , 0x20 , 0x20 , 0x00 
  defb    0x00 , 0x1C , 0x30 , 0x0C , 0x38 , 0x00 
  defb    0x10 , 0x38 , 0x10 , 0x10 , 0x0C , 0x00 
  defb    0x00 , 0x24 , 0x24 , 0x24 , 0x1C , 0x00 
  defb    0x00 , 0x44 , 0x44 , 0x28 , 0x10 , 0x00 
  defb    0x00 , 0x44 , 0x44 , 0x54 , 0x28 , 0x00 
  defb    0x00 , 0x64 , 0x18 , 0x30 , 0x4C , 0x00 
  defb    0x00 , 0x24 , 0x14 , 0x08 , 0x10 , 0x20 
  defb    0x00 , 0x3C , 0x08 , 0x10 , 0x3C , 0x00 
  defb    0x08 , 0x10 , 0x30 , 0x10 , 0x10 , 0x08 
  defb    0x10 , 0x10 , 0x10 , 0x10 , 0x10 , 0x00 
  defb    0x20 , 0x10 , 0x18 , 0x10 , 0x10 , 0x20 
  defb    0x14 , 0x28 , 0x00 , 0x00 , 0x00 , 0x00 


		SECTION	data_clib

; master packet for write operation
packet_wr:
	defw	sndpkt
packet_sz:
	defw	12		; packet sz (=6+data len)
	defw	xcoord	; packet addr expected back from the slave CPU (1 byte for return code only, we use the foo position of xcoord)
	defw	1		; size of the expected packet being received (just the return code)

	
sndpkt:
	defb	$25		; slave CPU command to write to the graphics memory ($25 = write)
xcoord:
	defb	0
ycoord:
	defb	0
width:
	defb	1
height:
	defb	6
operation:
	defb	0		; Operation (0=store)
data:
	defs	6

